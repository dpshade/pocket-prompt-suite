name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-core:
    name: Test Core (Go)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('core/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./core
      run: go mod download
      
    - name: Run tests
      working-directory: ./core
      run: go test -v ./...
      
    - name: Build
      working-directory: ./core
      run: go build -v -o pocket-prompt main.go

  test-extension:
    name: Test Extension (TypeScript)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/install/cache
          **/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: Install dependencies
      run: bun install
      
    - name: Lint
      working-directory: ./raycast-extension
      run: bun run lint
      
    - name: Build
      working-directory: ./raycast-extension
      run: bun run build
      
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test-core, test-extension]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Build core
      working-directory: ./core
      run: go build -o pocket-prompt main.go
      
    - name: Start server in background
      working-directory: ./core
      run: |
        ./pocket-prompt --url-server &
        echo $! > server.pid
        
    - name: Wait for server
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8080/health; then
            echo "Server is ready"
            exit 0
          fi
          echo "Waiting for server... ($i/30)"
          sleep 2
        done
        echo "Server failed to start"
        exit 1
        
    - name: Test API endpoints
      run: |
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/pocket-prompt/list?format=json
        
    - name: Stop server
      run: |
        if [ -f core/server.pid ]; then
          kill $(cat core/server.pid) || true
        fi